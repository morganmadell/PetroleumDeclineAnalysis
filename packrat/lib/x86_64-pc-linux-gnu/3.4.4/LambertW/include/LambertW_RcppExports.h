// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __LambertW_RcppExports_h__
#define __LambertW_RcppExports_h__

#include <Rcpp.h>

namespace LambertW {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("LambertW", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("LambertW", "LambertW_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in LambertW");
            }
        }
    }

    inline NumericVector W_Cpp(const NumericVector& z, int branch) {
        typedef SEXP(*Ptr_W_Cpp)(SEXP,SEXP);
        static Ptr_W_Cpp p_W_Cpp = NULL;
        if (p_W_Cpp == NULL) {
            validateSignature("NumericVector(*W_Cpp)(const NumericVector&,int)");
            p_W_Cpp = (Ptr_W_Cpp)R_GetCCallable("LambertW", "LambertW_W_Cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_W_Cpp(Rcpp::wrap(z), Rcpp::wrap(branch));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector W_delta_Cpp(const NumericVector& z, double delta) {
        typedef SEXP(*Ptr_W_delta_Cpp)(SEXP,SEXP);
        static Ptr_W_delta_Cpp p_W_delta_Cpp = NULL;
        if (p_W_delta_Cpp == NULL) {
            validateSignature("NumericVector(*W_delta_Cpp)(const NumericVector&,double)");
            p_W_delta_Cpp = (Ptr_W_delta_Cpp)R_GetCCallable("LambertW", "LambertW_W_delta_Cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_W_delta_Cpp(Rcpp::wrap(z), Rcpp::wrap(delta));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector W_delta_alpha_Cpp(const NumericVector& z, double delta, double alpha) {
        typedef SEXP(*Ptr_W_delta_alpha_Cpp)(SEXP,SEXP,SEXP);
        static Ptr_W_delta_alpha_Cpp p_W_delta_alpha_Cpp = NULL;
        if (p_W_delta_alpha_Cpp == NULL) {
            validateSignature("NumericVector(*W_delta_alpha_Cpp)(const NumericVector&,double,double)");
            p_W_delta_alpha_Cpp = (Ptr_W_delta_alpha_Cpp)R_GetCCallable("LambertW", "LambertW_W_delta_alpha_Cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_W_delta_alpha_Cpp(Rcpp::wrap(z), Rcpp::wrap(delta), Rcpp::wrap(alpha));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

    inline NumericVector W_gamma_Cpp(const NumericVector& z, double gamma, int branch) {
        typedef SEXP(*Ptr_W_gamma_Cpp)(SEXP,SEXP,SEXP);
        static Ptr_W_gamma_Cpp p_W_gamma_Cpp = NULL;
        if (p_W_gamma_Cpp == NULL) {
            validateSignature("NumericVector(*W_gamma_Cpp)(const NumericVector&,double,int)");
            p_W_gamma_Cpp = (Ptr_W_gamma_Cpp)R_GetCCallable("LambertW", "LambertW_W_gamma_Cpp");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_W_gamma_Cpp(Rcpp::wrap(z), Rcpp::wrap(gamma), Rcpp::wrap(branch));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<NumericVector >(__result);
    }

}

#endif // __LambertW_RcppExports_h__
